generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  accounts     Account[]
  kyc          KycProfile?
}

model KycProfile {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  fullName  String?
  dob       DateTime?
  country   String?
  provider  String?   // e.g., SUMSUB, ONFIDO (stub)
  externalId String?
  status    KycStatus @default(PENDING)
  createdAt DateTime @default(now())
}

enum KycStatus {
  PENDING
  APPROVED
  REJECTED
}

model Account {
  id           String        @id @default(cuid())
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  currency     String
  balanceMinor Int           @default(0)
  createdAt    DateTime      @default(now())
  outgoing     Transaction[] @relation("fromAccount")
  incoming     Transaction[] @relation("toAccount")
}

model Transaction {
  id            String   @id @default(cuid())
  fromAccount   Account  @relation("fromAccount", fields: [fromAccountId], references: [id])
  fromAccountId String
  toAccount     Account  @relation("toAccount", fields: [toAccountId], references: [id])
  toAccountId   String
  amountMinor   Int
  currency      String
  status        String
  createdAt     DateTime @default(now())
}

model PaymentIntent {
  id            String   @id @default(cuid())
  accountId     String
  amountMinor   Int
  currency      String
  provider      String
  providerRef   String? @unique
  status        String    @default("requires_payment_method")
  createdAt     DateTime  @default(now())
}

model ProviderLink {
  id        String   @id @default(cuid())
  userId    String
  provider  String
  metadata  Json?
  createdAt DateTime @default(now())

  @@unique([userId, provider])
}

